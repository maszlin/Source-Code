CREATE OR REPLACE TRIGGER "NEPS"."P_GC_SPLICE_VALIDATE_BIUR" 
BEFORE INSERT OR UPDATE
ON NEPS.B$GC_SPLICE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
WHEN (
NEW.G3E_ID != -1 OR NEW.G3E_ID IS NULL
      )
DECLARE
	v_FID_CBL		B$GC_CBL.G3E_FID%TYPE;
	v_FNO_CBL		B$GC_CBL.G3E_FNO%TYPE;
	v_SPLICE_CLASS	B$GC_SPLICE.SPLICE_CLASS%TYPE;
BEGIN
	--------------------------------------------------------------------------------------------------------------------
	-- TRIGGERS P_GC_SPLICE_VALIDATE_BIUR
	--
	-- Created by : Ageng Setiawan
	-- Created Date : 03 Feb 2012
	-- Modified Date : 26 Feb 2012
	--
	-- Functionality :
	-- 		To handle validate for splice. Cheers !!!
	--------------------------------------------------------------------------------------------------------------------
	IF (GC_COMMON.IsServicesEvent(LTT_ADMIN.GETMODE,:NEW.LTT_STATUS, INSERTING, B$GC_SPLICE_PKG.v_NumEntries) = FALSE) THEN
		RETURN;
	END IF;

	GC_COMMON.EnableLTTCleanup('B$GC_SPLICE');
	IF INSERTING THEN
		IF :NEW.SPLICE_CLASS = 'Main Joint' THEN
			-- check for NEW CABLE_CODE
			:NEW.CABLE_CODE := GC_OSP_COP_VAL.CNO_10801_GET_CBLCODE;
		ELSE
			BEGIN
				SELECT A.G3E_FID, A.G3E_FNO, GC_OSP_COP_VAL.CNO_10800_GET_SPLICE_CLASS(B.CABLE_CLASS) INTO v_FID_CBL, v_FNO_CBL, v_SPLICE_CLASS FROM GC_NR_CONNECT A, GC_CBL B WHERE A.G3E_FID = B.G3E_FID AND A.OUT_FID = :NEW.G3E_FID AND ROWNUM = 1;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					v_FID_CBL := 0;
					v_FNO_CBL := 0;
					v_SPLICE_CLASS := NULL;
			END;

			IF v_FID_CBL != 0 THEN
				IF :NEW.CABLE_CODE IS NULL OR :NEW.CABLE_CODE = '' THEN
					GC_OSP_COP_VAL.CNO_GET_INFO_FROM_NR(v_FID_CBL,
														v_FNO_CBL,
														:NEW.CABLE_CODE,
														:NEW.ITFACE_CODE);
				END IF;

				IF :NEW.SPLICE_CLASS IS NULL THEN
					IF v_SPLICE_CLASS IS NULL THEN
						BEGIN
							SELECT GC_OSP_COP_VAL.CNO_10800_GET_SPLICE_CLASS(B.CABLE_CLASS) INTO v_SPLICE_CLASS FROM GC_NR_CONNECT A, GC_CBL B WHERE A.G3E_FID = B.G3E_FID AND A.IN_FID = :NEW.G3E_FID AND ROWNUM = 1;
						EXCEPTION
							WHEN NO_DATA_FOUND THEN
								v_SPLICE_CLASS := NULL;
						END;
						IF v_SPLICE_CLASS IS NULL THEN
							BEGIN
								SELECT GC_OSP_COP_VAL.CNO_10800_GET_SPLICE_CLASS(B.CABLE_CLASS) INTO v_SPLICE_CLASS FROM GC_NR_CONNECT A, GC_CBL B WHERE A.G3E_FID = B.G3E_FID AND A.OUT_FID = :NEW.G3E_FID AND ROWNUM = 1;
							EXCEPTION
								WHEN NO_DATA_FOUND THEN
									v_SPLICE_CLASS := 'JOINT E-SIDE';
							END;
							:NEW.SPLICE_CLASS := v_SPLICE_CLASS;
						ELSE
							:NEW.SPLICE_CLASS := v_SPLICE_CLASS;
						END IF;
					ELSE
						:NEW.SPLICE_CLASS := v_SPLICE_CLASS;
					END IF;
				END IF;
			ELSE
				IF :NEW.SPLICE_CLASS IS NULL THEN
					:NEW.SPLICE_CLASS := 'JOINT E-SIDE';
				END IF;
			END IF;
		END IF;
	END IF;
	GC_COMMON.DisableLTTCleanup;
	EXCEPTION
		WHEN OTHERS THEN
			GC_COMMON.RAISEEXCEPTION('P_GC_SPLICE_VALIDATE_BIUR');
END P_GC_SPLICE_VALIDATE_BIUR;
/
