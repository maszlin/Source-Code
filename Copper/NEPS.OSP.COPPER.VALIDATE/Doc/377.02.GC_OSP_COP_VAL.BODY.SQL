CREATE OR REPLACE PACKAGE BODY GC_OSP_COP_VAL
AS

/********************************************************************************
 ** PACKAGE GC_OSP_COP_VAL      									   	   	   **
 **                                                                            **
 ** Created by : Ageng Setiawan 											   **
 ** Created Date : 21 Oct 2011 									               **
 ********************************************************************************/

FUNCTION GET_PROCESSID RETURN VARCHAR2
IS
	v_JOB_ACTIVE	G3E_JOB.G3E_IDENTIFIER%TYPE;
	v_PROCESSID		VARCHAR(25) := NULL;
BEGIN
	v_JOB_ACTIVE := LTT_USER.GETACTIVEJOB;
	IF v_JOB_ACTIVE IS NOT NULL THEN
		v_PROCESSID := v_JOB_ACTIVE||'-'||TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
	END IF;
	RETURN v_PROCESSID;
END GET_PROCESSID;

FUNCTION IS_CODE_IN_NUMBER(p_CHAR	VARCHAR2) RETURN BOOLEAN
IS
	IS_RESULT	BOOLEAN := TRUE;
BEGIN
	FOR i_CNT IN 1..LENGTH(p_CHAR)
	LOOP
		IF (ASCII(SUBSTR(p_CHAR, i_CNT, 1)) < 48) OR (ASCII(SUBSTR(p_CHAR, i_CNT, 1)) > 57) THEN
			IS_RESULT := FALSE;
		END IF;
	END LOOP;
	RETURN IS_RESULT;
END IS_CODE_IN_NUMBER;

FUNCTION GET_LAST_GEOM_POINT(p_GEOMETRY	MDSYS.SDO_GEOMETRY,
							 p_X_OR_Y	VARCHAR2) RETURN NUMBER
IS
	v_ORDINATES SDO_ORDINATE_ARRAY;
	v_NUM_ORD	NUMBER;
BEGIN
	v_ORDINATES := p_GEOMETRY.SDO_ORDINATES;
	IF (p_X_OR_Y = 'X') THEN
		v_NUM_ORD := 1;
	ELSE
		v_NUM_ORD := 2;
	END IF;
	RETURN v_ORDINATES(v_NUM_ORD);
END GET_LAST_GEOM_POINT;

FUNCTION GET_LAST_GEOM_LINE( p_GEOMETRY	MDSYS.SDO_GEOMETRY,
							 p_X_OR_Y	VARCHAR2) RETURN NUMBER
IS
	v_ORDINATES 	SDO_ORDINATE_ARRAY;
	v_CNT_ORDINATES NUMBER := 0;
	v_NUM_ORD		NUMBER;
BEGIN
	v_ORDINATES := p_GEOMETRY.SDO_ORDINATES;
	v_CNT_ORDINATES := v_ORDINATES.COUNT;
	IF (p_X_OR_Y = 'X') THEN
		v_NUM_ORD := v_CNT_ORDINATES - 2;
	ELSE
		v_NUM_ORD := v_CNT_ORDINATES - 1;
	END IF;
	RETURN v_ORDINATES(v_NUM_ORD);
END GET_LAST_GEOM_LINE;

FUNCTION EXTRACT_LINE_TO_VECTOR(p_GEOMETRY MDSYS.SDO_GEOMETRY) RETURN VARCHAR2
IS
	v_ORDINATES	SDO_ORDINATE_ARRAY;
	v_RERULT	VARCHAR2(2024) := NULL;
	v_Z			NUMBER := 0;
BEGIN
	------------------------------------------------------------------------------------------------------------------------
	-- FORMAT RETURN 	: X1|Y1|...|Xn|Yn
	-- SAMPLE QUERY		: SELECT EXTRACT_LINE_TO_VECTOR(G3E_GEOMETRY) FROM GC_CBL_L WHERE ROWNUM BETWEEN 1 AND 10
	------------------------------------------------------------------------------------------------------------------------
	
	v_ORDINATES := p_GEOMETRY.SDO_ORDINATES;
	FOR v_ORD IN 1..v_ORDINATES.COUNT LOOP
		v_Z := v_Z + 1;
		IF v_Z < 3 THEN
			IF v_RERULT IS NULL THEN
				v_RERULT := v_ORDINATES(v_ORD);
			ELSE
				v_RERULT := v_RERULT||'|'||v_ORDINATES(v_ORD);
			END IF;
		ELSE
			v_Z := 0;
		END IF;
	END LOOP;
	
	RETURN v_RERULT;
END EXTRACT_LINE_TO_VECTOR;

FUNCTION OFSET_GEOM_T (	p_GEOMETRY	MDSYS.SDO_GEOMETRY,
						p_TOT_OFSET	NUMBER)
						RETURN MDSYS.SDO_GEOMETRY
IS
	--------------------------------------------------------------------------------------------------------------------------------
	-- REF QUERY :
	-- SELECT   G3E_FID,
	-- 			ANGLE,
	-- 			X_ORI,
	-- 			X_ORI + (COS(ANGLE + ((3 * PI)/2)) * 0.8) X_NEW,
	-- 			Y_ORI,
	-- 			Y_ORI + (SIN(ANGLE + ((3 * PI)/2)) * 0.8) Y_NEW
	-- FROM (
	-- 		SELECT  G3E_FID,
	-- 			EXTRACT_TO_VECTOR(G3E_GEOMETRY, 1) X_ORI,
	-- 			EXTRACT_TO_VECTOR(G3E_GEOMETRY, 2) Y_ORI,
	-- 			ATAN(EXTRACT_TO_VECTOR(G3E_GEOMETRY, 5)/EXTRACT_TO_VECTOR(G3E_GEOMETRY, 4)) ANGLE,
	-- 			3.141592653589 PI
	-- 		FROM GC_CBL_T) A
	--------------------------------------------------------------------------------------------------------------------------------
	v_ORDINATES 	SDO_ORDINATE_ARRAY;
	v_PI			NUMBER := 3.141592653589;

	-- OLD INFORMATION
	v_X_OLD			NUMBER := 0;
	v_Y_OLD			NUMBER := 0;
	v_COS			NUMBER := 0;
	v_SIN			NUMBER := 0;
	v_ANGLE			NUMBER := 0;

	-- NEW INFORMATION
	v_X_NEW			NUMBER := 0;
	v_Y_NEW			NUMBER := 0;

	-- OUTPUT
	v_ORDS 					SDO_ORDINATE_ARRAY := SDO_ORDINATE_ARRAY();
	v_OUTGEOM 				MDSYS.SDO_GEOMETRY;
BEGIN
	v_ORDINATES := p_GEOMETRY.SDO_ORDINATES;
	v_X_OLD := v_ORDINATES(1);
	v_Y_OLD := v_ORDINATES(2);
	v_COS	:= v_ORDINATES(4);
	v_SIN	:= v_ORDINATES(5);
	v_ANGLE := ATAN(v_SIN/v_COS);

	v_X_NEW := v_X_OLD + (COS(v_ANGLE + ((3 * v_PI) / 2)) * p_TOT_OFSET);
	v_Y_NEW := v_Y_OLD + (SIN(v_ANGLE + ((3 * v_PI) / 2)) * p_TOT_OFSET);

	-- PREPARE FOR OUTPUT
	v_ORDS.extend(6);
	-- XY
	v_ORDS(1) := v_X_NEW;
	v_ORDS(2) := v_Y_NEW;
	v_ORDS(3) := 0;

	-- COS-SIN
	v_ORDS(4) := v_COS;
	v_ORDS(5) := v_SIN;
	v_ORDS(6) := 0;

	v_OUTGEOM := SDO_GEOMETRY(3001, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1, 1, 4, 1, 0), v_ORDS);

	RETURN v_OUTGEOM;
END OFSET_GEOM_T;

PROCEDURE TRACE_DOWNSTREAM(v_TRACE_NAME IN VARCHAR2, v_TRACE_FID IN NUMBER, v_TRACE_CURSOR OUT G3E_DBTYPES.G3E_REF_CURSOR) 
IS	
BEGIN
	TRACE.DELETE(v_TRACE_NAME);
	TRACE.DEFINE(v_TRACE_NAME, 10, '(tr_s.G3E_FNO2 = 10300) OR (tr_s.G3E_FNO2 = 11900)', NULL, NULL, 1, NULL);
	TRACE.SETSEED(v_TRACE_FID, NULL, NULL);
	TRACE.SETHINT('D');
	TRACE.EXECUTE;
	COMMIT;
	v_TRACE_CURSOR := NULL;
END TRACE_DOWNSTREAM;

PROCEDURE TRACE_UPSTREAM(v_TRACE_NAME IN VARCHAR2, v_TRACE_FID IN NUMBER, v_TRACE_CURSOR OUT G3E_DBTYPES.G3E_REF_CURSOR) 
IS	
BEGIN
	TRACE.DELETE(v_TRACE_NAME);
	TRACE.DEFINE(v_TRACE_NAME, 10, '(tr_s.G3E_FNO1 = 10300) OR (tr_s.G3E_FNO1 = 11900)', NULL, NULL, 8, NULL);
	TRACE.SETSEED(v_TRACE_FID, NULL, NULL);
	TRACE.SETHINT('U');
	TRACE.EXECUTE;
	COMMIT;
	v_TRACE_CURSOR := NULL;
END TRACE_UPSTREAM;
 
FUNCTION NEXT_CHAR(p_INIT_CHAR IN VARCHAR2) RETURN VARCHAR2
IS
	v_LEN_CHAR	NUMBER;
	v_WORD_CHK	VARCHAR2(1);
	v_RESULT	VARCHAR2(100);
	v_LAST_CHAR	BOOLEAN := FALSE;
BEGIN
	v_LEN_CHAR := LENGTH(p_INIT_CHAR);
	IF v_LEN_CHAR = 1 THEN
		v_WORD_CHK := p_INIT_CHAR;
		IF v_WORD_CHK = 'Z' THEN
			v_RESULT := 'AA';
		ELSE
			v_RESULT := CHR(ASCII(p_INIT_CHAR) + 1);
		END IF;
	ELSE
		FOR I IN 0..(v_LEN_CHAR - 1)
		LOOP
			v_WORD_CHK := SUBSTR(p_INIT_CHAR, (v_LEN_CHAR - I), 1);
			IF v_LAST_CHAR = FALSE THEN
				v_LAST_CHAR := TRUE;
				IF v_WORD_CHK = 'Z' THEN
					v_RESULT := SUBSTR(p_INIT_CHAR, 1, v_LEN_CHAR-1)||'A';
				ELSE
					v_RESULT := SUBSTR(p_INIT_CHAR, 1, v_LEN_CHAR-1)||CHR(ASCII(v_WORD_CHK) + 1);
					EXIT;
				END IF;
			ELSE
				IF I = (v_LEN_CHAR - 1) THEN
					IF v_WORD_CHK = 'Z' THEN
						v_RESULT := 'AA'||SUBSTR(v_RESULT, 2, v_LEN_CHAR-1);
						EXIT;
					ELSE
						v_RESULT := CHR(ASCII(v_WORD_CHK) + 1)||SUBSTR(v_RESULT, 1, v_LEN_CHAR-1);
						EXIT;
					END IF;
				ELSE
					IF v_WORD_CHK = 'Z' THEN
						DBMS_OUTPUT.PUT_LINE(v_RESULT);
						v_RESULT := SUBSTR(v_RESULT, 1, v_LEN_CHAR - (I+1))||'A'||SUBSTR(v_RESULT, v_LEN_CHAR - (I-1), I);
					ELSE
						v_RESULT := SUBSTR(v_RESULT, 1, v_LEN_CHAR - (I+1))||CHR(ASCII(v_WORD_CHK) + 1)||SUBSTR(v_RESULT, v_LEN_CHAR - (I-1), I);
						EXIT;
					END IF;
				END IF;
				
			END IF;
			
		END LOOP;
	END IF;

    RETURN v_RESULT;
END NEXT_CHAR;

FUNCTION GET_TOTAL_LENGTH(p_ARR_VECTOR IN VARCHAR2) RETURN NUMBER
IS
	CURSOR c_LOAD_VECTOR IS 
		WITH tempVector AS
			 (SELECT p_ARR_VECTOR str
				FROM DUAL)
		SELECT REGEXP_SUBSTR (str, '[^|]+', 1, LEVEL) POINT
			  FROM tempVector
		CONNECT BY LEVEL <= (select LENGTH (REPLACE (str, '|', NULL)) from tempVector);
	
	v_TEMP_TOTAL	VARCHAR2(100) := '';
	v_TOTAL_LENGTH	NUMBER := 0;
	v_X1			NUMBER := 0;
	v_X2			NUMBER := 0;
	v_Y1			NUMBER := 0;
	v_Y2			NUMBER := 0;
	--------------------------------------------------------------------
	-- To Test:
	-- SET SERVEROUTPUT ON;
	-- SELECT GC_OSP_COP_VAL.GET_TOTAL_LENGTH('1|1|4|5') FROM DUAL;
	-- SET SERVEROUTPUT OFF;
	--------------------------------------------------------------------
BEGIN
	FOR r_VECTOR IN c_LOAD_VECTOR LOOP
		DBMS_OUTPUT.PUT_LINE(r_VECTOR.POINT);
		IF r_VECTOR.POINT IS NOT NULL THEN
			IF v_X1 = 0 THEN
				v_X1 := r_VECTOR.POINT;
			ELSE
				IF v_Y1 = 0 THEN
					v_Y1 := r_VECTOR.POINT;
				ELSE
					IF v_X2 = 0 THEN
						v_X2 := r_VECTOR.POINT;
					ELSE
						IF v_Y2 = 0 THEN
							v_Y2 := r_VECTOR.POINT;
							v_TOTAL_lENGTH := v_TOTAL_lENGTH + SQRT(((v_X1-v_X2)*(v_X1-v_X2)) + ((v_Y1-v_Y2)*(v_Y1-v_Y2)));
							DBMS_OUTPUT.PUT_LINE(v_X1||'='||v_X2||'='||v_Y1||'='||v_Y2);
							v_X1 := v_X2;
							v_Y1 := v_Y2;
							v_X2 := 0;
							v_Y2 := 0;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;
	END LOOP;
	
	v_TEMP_TOTAL := TO_CHAR(v_TOTAL_LENGTH, '9999999D99');
	DBMS_OUTPUT.PUT_LINE(v_TOTAL_LENGTH);
	RETURN TO_NUMBER(v_TEMP_TOTAL);
END GET_TOTAL_LENGTH;

FUNCTION SUPPORT_INSERT_JOINT(p_G3E_FID IN NUMBER) RETURN VARCHAR2
IS
	v_CABLE_CLASS 	VARCHAR2(30);
BEGIN
	BEGIN
		SELECT CABLE_CLASS INTO v_CABLE_CLASS FROM GC_CBL WHERE G3E_FID = (SELECT G3E_FID FROM GC_NR_CONNECT WHERE OUT_FID = (SELECT IN_FID FROM GC_NR_CONNECT WHERE G3E_FID = p_G3E_FID));
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN
			v_CABLE_CLASS := 'E-CABLE';
		WHEN OTHERS THEN
			v_CABLE_CLASS := 'E-CABLE';
	END;
	
	RETURN v_CABLE_CLASS;
END SUPPORT_INSERT_JOINT;

FUNCTION CNO_13001_GET_DP_NUMBER(p_EXC_ABB		IN VARCHAR2,
								 p_ITFACE_CODE	IN VARCHAR2,
								 p_MAX_DP_NUM	IN VARCHAR2) RETURN VARCHAR2 -- p_MAX_DP_NUM IS TO HANDLE IF SYSTEM ALREADY KNOW MAX DP_NUM 
IS
	v_MAX_DP_NUM	VARCHAR2(10);
	v_NEXT_DP		VARCHAR2(10);
	
	v_ASC_FIRST		NUMBER;
	v_IS_STR_CHAR	BOOLEAN := FALSE;
	v_CHR_CHK		NUMBER;
	v_COL_CHAR		NUMBER  := 0;
BEGIN
	-- CHECK CURRENT MAX DP_NUM
	IF p_MAX_DP_NUM IS NULL THEN
		BEGIN
			SELECT MAX(TRIM(A.DP_NUM)) INTO v_MAX_DP_NUM 
            FROM GC_DP A, GC_NETELEM B
            WHERE     A.G3E_FID = B.G3E_FID
                AND A.ITFACE_CODE =  p_ITFACE_CODE
                AND B.EXC_ABB = p_EXC_ABB
                AND LENGTH(TRIM(A.DP_NUM)) = (SELECT MAX(LENGTH(TRIM(C.DP_NUM))) FROM GC_DP C, GC_NETELEM D WHERE C.G3E_FID = D.G3E_FID AND D.EXC_ABB = p_EXC_ABB AND C.ITFACE_CODE =  p_ITFACE_CODE);
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				v_MAX_DP_NUM := '0';
			WHEN OTHERS THEN
				v_MAX_DP_NUM := '0';
		END;
		
		IF v_MAX_DP_NUM IS NULL THEN
			v_MAX_DP_NUM := '0';
		END IF;
	ELSE
		v_MAX_DP_NUM := p_MAX_DP_NUM;
	END IF;
	
	-- SET NEXT DP_NUM
	/*
	v_ASC_FIRST := ASCII(SUBSTR(v_MAX_DP_NUM, 1, 1));
	IF LENGTH(v_MAX_DP_NUM) = 1 THEN
		IF v_ASC_FIRST >= 48 AND v_ASC_FIRST <= 57 THEN
			v_NEXT_DP := v_MAX_DP_NUM + 1;
		ELSE
			v_NEXT_DP := GC_OSP_COP_VAL.NEXT_CHAR(v_MAX_DP_NUM);
		END IF;
	ELSE
		FOR I IN 1..LENGTH(v_MAX_DP_NUM)
		LOOP
			IF v_IS_STR_CHAR = FALSE THEN
				v_CHR_CHK := ASCII(SUBSTR(v_MAX_DP_NUM, I, 1));
				IF v_CHR_CHK < 48 OR v_CHR_CHK > 57 THEN
					v_IS_STR_CHAR	:= TRUE;
					v_COL_CHAR 		:= I;
				END IF;
			END IF;
		END LOOP;
		IF v_IS_STR_CHAR = TRUE THEN
			IF v_COL_CHAR = LENGTH(v_MAX_DP_NUM) THEN
				v_NEXT_DP := SUBSTR(v_MAX_DP_NUM, 1, LENGTH(v_MAX_DP_NUM) - 1) + 1;
			ELSE
				v_NEXT_DP := GC_OSP_COP_VAL.NEXT_CHAR(v_MAX_DP_NUM);
			END IF;
		ELSE
			v_NEXT_DP := v_MAX_DP_NUM + 1;
		END IF;
	END IF;
	*/
	v_NEXT_DP := GC_OSP_COP_VAL.NEXT_CHAR(TRIM(v_MAX_DP_NUM));
	
	RETURN v_NEXT_DP;
END CNO_13001_GET_DP_NUMBER;

/* FUNCTION GET CABLE CODE FOR MAIN JOINT */
FUNCTION CNO_10801_GET_CBLCODE RETURN VARCHAR2
IS
	v_CBL_CODE	GC_SPLICE.CABLE_CODE%TYPE;
	v_LENGTH	NUMBER := 0;
BEGIN
	BEGIN
		SELECT DECODE(MAX(TRIM(A.CABLE_CODE)), NULL, 'A', GC_OSP_COP_VAL.NEXT_CHAR(MAX(TRIM(A.CABLE_CODE)))) INTO v_CBL_CODE
		FROM GC_SPLICE A, DGC_SPLICE_S B 
		WHERE 	A.G3E_FID = B.G3E_FID 
			AND B.G3E_DETAILID IN (SELECT G3E_DETAILID FROM GC_DETAIL 
								   WHERE G3E_FID IN (SELECT G3E_FID FROM GC_NETELEM 
													 WHERE 	G3E_FNO = 6000 
													 AND EXC_ABB = (SELECT EXC_ABB FROM G3E_JOB WHERE G3E_IDENTIFIER = LTT_USER.GETACTIVEJOB)))
			AND LENGTH(TRIM(A.CABLE_CODE)) = (	SELECT MAX(LENGTH(TRIM(A.CABLE_CODE))) 
												FROM GC_SPLICE A, DGC_SPLICE_S B 
												WHERE 	A.G3E_FID = B.G3E_FID 
													AND B.G3E_DETAILID IN (SELECT G3E_DETAILID FROM GC_DETAIL 
																		   WHERE G3E_FID IN (SELECT G3E_FID FROM GC_NETELEM 
																							 WHERE 	G3E_FNO = 6000 
																							 AND EXC_ABB = (SELECT EXC_ABB FROM G3E_JOB WHERE G3E_IDENTIFIER = LTT_USER.GETACTIVEJOB))));
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			v_CBL_CODE := '';
		WHEN OTHERS THEN
			v_CBL_CODE := '';
	END;
	
	RETURN v_CBL_CODE;
END CNO_10801_GET_CBLCODE;

FUNCTION GET_CODE_CBL_T(p_CABLE_CLASS		VARCHAR2,
						p_CABLE_CODE		VARCHAR2,
						p_SOURCE_TYPE		VARCHAR2,
						p_EXC_ABB			VARCHAR2) RETURN VARCHAR2 
IS
/********************************************************************************
 ** FUNCTION GET_CODE_CBL_T      											   **
 **                                                                            **
 ** Created by : Ageng Setiawan 											   **
 ** Created Date : 03 Feb 2012 									               **
 **																			   **
 **																			   **
 **								THANKS'S GOD								   **
 ********************************************************************************/

	v_CONTENT_TEXT	VARCHAR2(100) := '';
BEGIN
	-- FOR E-CABLE
	IF p_CABLE_CLASS = 'E-CABLE' THEN
		v_CONTENT_TEXT := p_CABLE_CODE;

	-- FOR D-CABLE
	ELSIF p_CABLE_CLASS = 'D-CABLE' THEN
		v_CONTENT_TEXT := p_CABLE_CODE;

	-- FOR STUB E-SIDE
	ELSIF p_CABLE_CLASS = 'STUB E-SIDE' THEN
		v_CONTENT_TEXT := p_CABLE_CODE;

	-- FOR STUMP E-SIDE
	ELSIF p_CABLE_CLASS = 'STUMP E-SIDE' THEN
		v_CONTENT_TEXT := p_CABLE_CODE;

	-- FOR STUB D-SIDE
	ELSIF p_CABLE_CLASS = 'STUB D-SIDE' THEN
		v_CONTENT_TEXT := p_CABLE_CODE;

	-- FOR STUMP D-SIDE
	ELSIF p_CABLE_CLASS = 'STUMP D-SIDE' THEN
		v_CONTENT_TEXT := p_CABLE_CODE;

	-- FOR TIE D-CABLE
	ELSIF p_CABLE_CLASS = 'TIE D-CABLE' THEN
		v_CONTENT_TEXT := 'D-TIE';

	-- FOR TIE E-CABLE
	ELSIF p_CABLE_CLASS = 'TIE E-CABLE' THEN
		v_CONTENT_TEXT := 'E-TIE';

	-- FOR TAIL
	ELSIF p_CABLE_CLASS = 'TAIL' THEN
		v_CONTENT_TEXT := 'TAIL';

	-- FOR NO MATCH
	ELSE
		v_CONTENT_TEXT := 'No Match';
	END IF;

	RETURN v_CONTENT_TEXT;
END GET_CODE_CBL_T;

FUNCTION GET_VALUE_CBL_T (	p_CABLE_CLASS		VARCHAR2,
							p_TEXT_FORMAT		NUMBER,
							p_COPPER_SIZE		NUMBER,
							p_GAUGE				NUMBER,
							p_EFFECTIVE_PAIRS	NUMBER,
							p_CTYPE				VARCHAR2,
							p_PLACEMENT			VARCHAR2,
							p_TOTAL_LENGTH		NUMBER,
							p_RACK_NO			NUMBER,		-- NEED TO KNOW THE SOURCE VALUE? BASE ON RULEBASE DEFAULT = 1
							p_CABLE_CODE		VARCHAR2,
							p_RT_CODE			VARCHAR2,
							p_SUB_TERMCODE		VARCHAR2,	-- FOR TAIL/VERTICAL_CABLE
							p_NUMCABLES			NUMBER,		-- FOR TAIL/VERTICAL_CABLE
							p_MDF_NUM			VARCHAR2,	-- FOR TAIL/VERTICAL_CABLE
							p_VERT_NUM			VARCHAR2,	-- FOR TAIL/VERTICAL_CABLE
							p_LO_PR				NUMBER,		-- FOR TAIL/VERTICAL_CABLE
							p_HI_PR				NUMBER		-- FOR TAIL/VERTICAL_CABLE
							) RETURN VARCHAR2 
IS
/********************************************************************************
 ** FUNCTION GET_VALUE_CBL_T      											   **
 **                                                                            **
 ** Created by : Ageng Setiawan 											   **
 ** Created Date : 03 Feb 2012 									               **
 ** Reff Table LNMS : C_COP_TEXTFORMAT										   **
 ** CODENUM CODETEXT                                                           **
 ** ------- ------------------------------                                     **
 **       1                                                                    **
 **       2 *                                                                  **
 **       5 No Text                                                            **
 **       6 ECP,Dist                                                           **
 **       7 Size,Gauge,ECP,Dist                                                **
 **       8 Size,Gauge,ECP,Type,Inst,Dist                                      **
 **       9 Size,Gauge,ECP,Type,Inst                                           **
 **																			   **
 **																			   **
 **								THANKS'S GOD								   **
 ********************************************************************************/

	v_CONTENT_TEXT	VARCHAR2(1000) := '';
	v_GAUGE			VARCHAR2(10) := '';
	v_NUMCABLES		NUMBER;
BEGIN
	IF p_GAUGE < 1 THEN
		v_GAUGE := '0'||p_GAUGE;
	ELSE
		v_GAUGE := p_GAUGE;
	END IF;
	-- FOR E-CABLE
	IF p_CABLE_CLASS = 'E-CABLE' THEN
		IF p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_COPPER_SIZE||'/'||v_GAUGE;
		END IF;
		IF p_COPPER_SIZE != p_EFFECTIVE_PAIRS OR p_TEXT_FORMAT = 6 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'('||p_EFFECTIVE_PAIRS||')';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_PLACEMENT != 'UG' AND p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 7 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_PLACEMENT;
		END IF;
		IF p_PLACEMENT = 'HR' OR p_PLACEMENT = 'VR' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'-'||p_RACK_NO||' ';
		END IF;
		IF p_TEXT_FORMAT != 5 AND p_TEXT_FORMAT != 9 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||p_TOTAL_LENGTH||'m';
		ELSE
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||' ';
		END IF;

	-- FOR D-CABLE
	ELSIF p_CABLE_CLASS = 'D-CABLE' THEN
		IF p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_COPPER_SIZE||'/'||v_GAUGE;
		END IF;
		IF p_COPPER_SIZE != p_EFFECTIVE_PAIRS OR p_TEXT_FORMAT = 6 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'('||p_EFFECTIVE_PAIRS||')';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_PLACEMENT != 'UG' AND p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 7 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_PLACEMENT;
		END IF;
		IF p_PLACEMENT = 'HR' OR p_PLACEMENT = 'VR' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'-'||p_RACK_NO;
		END IF;
		IF p_TEXT_FORMAT != 5 AND p_TEXT_FORMAT != 9 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||p_TOTAL_LENGTH||'m';
		ELSE
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10);
		END IF;

	-- FOR STUB E-SIDE
	ELSIF p_CABLE_CLASS = 'STUB E-SIDE' THEN
		IF p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_COPPER_SIZE||'/'||v_GAUGE;
		END IF;
		IF p_COPPER_SIZE != p_EFFECTIVE_PAIRS OR p_TEXT_FORMAT = 6 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'('||p_EFFECTIVE_PAIRS||')';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_PLACEMENT != 'UG' AND p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 7 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_PLACEMENT;
		END IF;
		IF p_PLACEMENT = 'HR' OR p_PLACEMENT = 'VR' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'-'||p_RACK_NO||' ';
		END IF;
		IF p_TEXT_FORMAT != 5 AND p_TEXT_FORMAT != 9 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||p_TOTAL_LENGTH||'m';
		ELSE
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||' ';
		END IF;

	-- FOR STUMP E-SIDE
	ELSIF p_CABLE_CLASS = 'STUMP E-SIDE' THEN
		IF p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_COPPER_SIZE||'/'||v_GAUGE;
		END IF;
		IF p_COPPER_SIZE != p_EFFECTIVE_PAIRS OR p_TEXT_FORMAT = 6 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'('||p_EFFECTIVE_PAIRS||')';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_PLACEMENT != 'UG' AND p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 7 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_PLACEMENT;
		END IF;
		IF p_PLACEMENT = 'HR' OR p_PLACEMENT = 'VR' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'-'||p_RACK_NO||' ';
		END IF;
		IF p_TEXT_FORMAT != 5 AND p_TEXT_FORMAT != 9 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||p_TOTAL_LENGTH||'m';
		ELSE
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||' ';
		END IF;

	-- FOR STUB D-SIDE
	ELSIF p_CABLE_CLASS = 'STUB D-SIDE' THEN
		IF p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_COPPER_SIZE||'/'||v_GAUGE;
		END IF;
		IF p_COPPER_SIZE != p_EFFECTIVE_PAIRS OR p_TEXT_FORMAT = 6 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'('||p_EFFECTIVE_PAIRS||')';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_PLACEMENT != 'UG' AND p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 7 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_PLACEMENT;
		END IF;
		IF p_PLACEMENT = 'HR' OR p_PLACEMENT = 'VR' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'-'||p_RACK_NO;
		END IF;
		IF p_TEXT_FORMAT != 5 AND p_TEXT_FORMAT != 9 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||p_TOTAL_LENGTH||'m';
		ELSE
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10);
		END IF;

	-- FOR STUMP D-SIDE
	ELSIF p_CABLE_CLASS = 'STUMP D-SIDE' THEN
		IF p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_COPPER_SIZE||'/'||v_GAUGE;
		END IF;
		IF p_COPPER_SIZE != p_EFFECTIVE_PAIRS OR p_TEXT_FORMAT = 6 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'('||p_EFFECTIVE_PAIRS||')';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE = 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'NF';
		END IF;
		IF p_TEXT_FORMAT = 8 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_TEXT_FORMAT = 9 AND p_CTYPE != 'NON-FF' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CTYPE;
		END IF;
		IF p_PLACEMENT != 'UG' AND p_TEXT_FORMAT != 6 AND p_TEXT_FORMAT != 7 AND p_TEXT_FORMAT != 5 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_PLACEMENT;
		END IF;
		IF p_PLACEMENT = 'HR' OR p_PLACEMENT = 'VR' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'-'||p_RACK_NO;
		END IF;
		IF p_TEXT_FORMAT != 5 AND p_TEXT_FORMAT != 9 THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10)||p_TOTAL_LENGTH||'m';
		ELSE
			v_CONTENT_TEXT := v_CONTENT_TEXT||CHR(10);
		END IF;

	-- FOR TIE D-CABLE
	ELSIF p_CABLE_CLASS = 'TIE D-CABLE' THEN
		v_CONTENT_TEXT := 'Tie cable : '||p_COPPER_SIZE||'/'||p_TOTAL_LENGTH||'m';

	-- FOR TIE E-CABLE
	ELSIF p_CABLE_CLASS = 'TIE E-CABLE' THEN
		v_CONTENT_TEXT := p_COPPER_SIZE||'/'||v_GAUGE||'('||p_EFFECTIVE_PAIRS||')'||p_CTYPE||CHR(10)||p_TOTAL_LENGTH||'m';

	-- FOR TAIL
	ELSIF p_CABLE_CLASS = 'TAIL' THEN
		v_NUMCABLES := TRUNC((p_HI_PR-p_LO_PR)/100) + 1;
		-- v_CONTENT_TEXT := '('||p_NUMCABLES||'x'||p_COPPER_SIZE||') '||p_MDF_NUM||'/'||p_VERT_NUM||'/'||p_LO_PR||'-'||p_HI_PR||' )';
		v_CONTENT_TEXT := '('||v_NUMCABLES||'x100) '||p_MDF_NUM||'/'||p_VERT_NUM||'/'||p_LO_PR||'-'||p_HI_PR||' )';
		IF p_SUB_TERMCODE != '***' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_SUB_TERMCODE;
		END IF;
		IF p_RT_CODE != '***' AND p_SUB_TERMCODE = '***' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_RT_CODE;
		END IF;
		IF p_CABLE_CODE != '***' AND p_RT_CODE != '***' AND p_SUB_TERMCODE = '***' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||'/'||p_CABLE_CODE;
		END IF;
		IF p_RT_CODE = '***' AND p_SUB_TERMCODE = '***' THEN
			v_CONTENT_TEXT := v_CONTENT_TEXT||p_CABLE_CODE;
		END IF;
		v_CONTENT_TEXT := v_CONTENT_TEXT||') ('||p_CABLE_CODE||')';

	-- FOR NO MATCH
	ELSE
		v_CONTENT_TEXT := 'No Match';
	END IF;

	RETURN v_CONTENT_TEXT;
END GET_VALUE_CBL_T;

FUNCTION CNO_10301_CHK_FORMAT_CODE (p_ITFACE_CODE	IN VARCHAR2,
									p_ITFACE_CLASS	IN VARCHAR2) RETURN VARCHAR2
IS
	v_RETURN 	VARCHAR2(1) := '0';
BEGIN
	IF (p_ITFACE_CLASS = 'SDF') THEN
		IF (LENGTH(p_ITFACE_CODE) = 4) THEN
			v_RETURN := '1';
		ELSE
			v_RETURN := '0';
		END IF;
	ELSE
		IF (LENGTH(p_ITFACE_CODE) = 3) THEN
			IF (GC_OSP_COP_VAL.IS_CODE_IN_NUMBER(p_ITFACE_CODE)) THEN
				IF (p_ITFACE_CLASS = 'CABINET') THEN
					IF (p_ITFACE_CODE < 901) THEN
						v_RETURN := '1';
					ELSE
						v_RETURN := '0';
					END IF;
				ELSE
					IF (p_ITFACE_CODE > 900) THEN
						v_RETURN := '1';
					ELSE
						v_RETURN := '0';
					END IF;
				END IF;
			ELSE
				v_RETURN := '0';
			END IF;
		ELSE
			v_RETURN := '0';
		END IF;
	END IF;
	
	RETURN v_RETURN;
END CNO_10301_CHK_FORMAT_CODE;

FUNCTION CNO_10301_GET_ITFACE_CODE (p_JOB_ID		IN VARCHAR2,
									p_ITFACE_CLASS	IN VARCHAR2) RETURN VARCHAR2
IS
	p_EXC_ABB		GC_NETELEM.EXC_ABB%TYPE;
	p_ITFACE_CODE	GC_ITFACE.ITFACE_CODE%TYPE;
BEGIN
	BEGIN
		SELECT EXC_ABB INTO p_EXC_ABB FROM G3E_JOB WHERE G3E_IDENTIFIER = p_JOB_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			p_EXC_ABB := '';
	END;
	
	BEGIN
		SELECT DECODE(MAX(TRIM(A.ITFACE_CODE)), NULL, DECODE(p_ITFACE_CLASS, 'SDF', '0001', 'CABINET', '001', '901'), GC_OSP_COP_VAL.NEXT_CHAR(MAX(TRIM(A.ITFACE_CODE)))) INTO p_ITFACE_CODE
		FROM GC_ITFACE A, GC_NETELEM B
		WHERE 	A.G3E_FID = B.G3E_FID
			AND	B.EXC_ABB = p_EXC_ABB
			AND A.ITFACE_CLASS = p_ITFACE_CLASS
			AND LENGTH(ITFACE_CODE) = DECODE(p_ITFACE_CLASS, 'SDF', 4, 3);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			IF p_ITFACE_CLASS = 'SDF' THEN
				p_ITFACE_CODE := '0001';
			ELSIF p_ITFACE_CLASS = 'CABINET' THEN
				p_ITFACE_CODE := '001';
			ELSIF p_ITFACE_CLASS = 'PHANTOM CABINET' THEN
				p_ITFACE_CODE := '901';
			END IF;
	END;
	
	RETURN p_ITFACE_CODE;
END CNO_10301_GET_ITFACE_CODE;

FUNCTION CNO_10401_GET_LC_NUM(p_EXC_ABB		IN VARCHAR2,
							  p_CABLE_CODE	IN VARCHAR2) RETURN NUMBER
IS
	v_LC_NUM	NUMBER := 0;
BEGIN
	BEGIN
		SELECT GC_OSP_COP_VAL.NEXT_CHAR(MAX(A.LC_NUM)) INTO v_LC_NUM FROM GC_LDCOIL A, GC_NETELEM B WHERE A.G3E_FID = B.G3E_FID AND B.EXC_ABB = p_EXC_ABB AND A.CABLE_CODE = p_CABLE_CODE;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			v_LC_NUM := 1;
		WHEN OTHERS THEN
			v_LC_NUM := 1;
	END;
	RETURN v_LC_NUM;
END CNO_10401_GET_LC_NUM;

FUNCTION CNO_7000_GET_DSIDE_CBLCODE(p_G3E_FID	IN NUMBER,
									p_IN_FID	IN NUMBER)
									RETURN VARCHAR2
IS
	v_CBLCODE	VARCHAR2(50);
	v_MAXCODE	VARCHAR2(50);
BEGIN
	BEGIN
		SELECT MAX(B.CABLE_CODE) INTO v_MAXCODE
		FROM GC_NR_CONNECT A, GC_CBL B 
		WHERE 	A.G3E_FID = B.G3E_FID 
			AND A.IN_FID = p_IN_FID
			AND A.G3E_FID <> p_G3E_FID;
		
		IF v_MAXCODE IS NULL THEN
			v_CBLCODE := '1';
		ELSE
			v_CBLCODE := SUBSTR(v_MAXCODE, 2, LENGTH(v_MAXCODE) - 1) + 1;
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			v_CBLCODE := '1';
		WHEN OTHERS THEN
			v_CBLCODE := '1';
	END;
	
	RETURN 'D'||v_CBLCODE;
END CNO_7000_GET_DSIDE_CBLCODE;

FUNCTION CNO_10800_GET_SPLICE_CLASS(p_CABLE_CLASS IN VARCHAR2) RETURN VARCHAR2
IS
	v_SPLICE_CLASS	GC_SPLICE.SPLICE_CLASS%TYPE;
BEGIN
	IF p_CABLE_CLASS = 'E-CABLE' THEN
		v_SPLICE_CLASS := 'JOINT E-SIDE';
	ELSIF p_CABLE_CLASS = 'D-CABLE' THEN
		v_SPLICE_CLASS := 'JOINT D-SIDE';
	ELSIF p_CABLE_CLASS = 'STUB E-SIDE' THEN
		v_SPLICE_CLASS := 'STUB E-SIDE';
	ELSIF p_CABLE_CLASS = 'STUMP E-SIDE' THEN
		v_SPLICE_CLASS := 'STUMP E-SIDE';
	ELSIF p_CABLE_CLASS = 'STUB D-SIDE' THEN
		v_SPLICE_CLASS := 'STUB D-SIDE';
	ELSIF p_CABLE_CLASS = 'STUMP D-SIDE' THEN
		v_SPLICE_CLASS := 'STUMP D-SIDE';
	ELSIF p_CABLE_CLASS = 'TIE D-CABLE' THEN
		v_SPLICE_CLASS := 'TIE D-SIDE';
	ELSIF p_CABLE_CLASS = 'TIE E-CABLE' THEN
		v_SPLICE_CLASS := 'TIE E-SIDE';
	ELSIF p_CABLE_CLASS = 'TAIL' THEN
		v_SPLICE_CLASS := 'Main Joint';
	ELSE
		v_SPLICE_CLASS := '';
	END IF;
	RETURN v_SPLICE_CLASS;
END CNO_10800_GET_SPLICE_CLASS;

PROCEDURE CNO_GET_INFO_FROM_NR (p_G3E_FID	IN NUMBER,
								p_G3E_FNO 	IN NUMBER,
								p_CBL_CODE	OUT VARCHAR2,
								p_CAB_CODE	OUT VARCHAR2)
IS
	v_SPLICE_CLASS	B$GC_SPLICE.SPLICE_CLASS%TYPE := '';
	v_CBL_CODE		B$GC_SPLICE.CABLE_CODE%TYPE := '';
	v_CAB_CODE		B$GC_ITFACE.ITFACE_CODE%TYPE := '';
	
	v_IN_FID		B$GC_NR_CONNECT.IN_FID%TYPE;
	v_IN_FNO		B$GC_NR_CONNECT.IN_FNO%TYPE;
	v_OUT_FID		B$GC_NR_CONNECT.OUT_FID%TYPE;
	v_OUT_FNO		B$GC_NR_CONNECT.OUT_FNO%TYPE;
	v_G3E_FID		B$GC_NR_CONNECT.G3E_FID%TYPE;
	v_G3E_FNO		B$GC_NR_CONNECT.G3E_FNO%TYPE;
BEGIN
	v_G3E_FID	:= p_G3E_FID;
	v_G3E_FNO	:= p_G3E_FNO;
	
	BEGIN
		SELECT IN_FID, IN_FNO, OUT_FID, OUT_FNO INTO v_IN_FID, v_IN_FNO, v_OUT_FID, v_OUT_FNO FROM GC_NR_CONNECT WHERE G3E_FNO = v_G3E_FNO AND G3E_FID = v_G3E_FID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			v_IN_FID 	:= 0;
			v_IN_FNO 	:= 0;
			v_OUT_FID	:= 0;
			v_OUT_FNO	:= 0;
	END;
	
	IF v_IN_FID != 0 THEN
		-- IF IN IS ITFACE = 10300
		IF v_IN_FNO = 10300 THEN
			BEGIN
				SELECT GC_OSP_COP_VAL.CNO_7000_GET_DSIDE_CBLCODE(v_G3E_FID, A.IN_FID), B.ITFACE_CODE INTO v_CBL_CODE, v_CAB_CODE FROM GC_NR_CONNECT A, GC_ITFACE B WHERE A.IN_FID = B.G3E_FID AND A.G3E_FID = v_G3E_FID;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					v_CBL_CODE 	:= '';
			END;
		ELSE
			LOOP
				-- CHECK NETWORK INFORMATION
				BEGIN
					SELECT A.IN_FID, A.IN_FNO, B.CABLE_CODE, B.SPLICE_CLASS, B.ITFACE_CODE INTO v_IN_FID, v_IN_FNO, v_CBL_CODE, v_SPLICE_CLASS, v_CAB_CODE FROM GC_NR_CONNECT A, GC_SPLICE B WHERE A.IN_FID = B.G3E_FID AND A.G3E_FID = v_G3E_FID;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						v_IN_FID 	:= 0;
						v_IN_FNO 	:= 0;
						v_CBL_CODE 	:= '';
				END;
				
				-- RAISE LOG
				DBMS_OUTPUT.PUT_LINE('G3E_FID = '||v_G3E_FID||' - CABLE CODE = '||v_CBL_CODE);
				
				-- SET VALUE FOR NEXT LOOPING
				IF v_CBL_CODE IS NULL THEN
					BEGIN
						SELECT G3E_FID INTO v_G3E_FID FROM GC_NR_CONNECT WHERE OUT_FID = v_IN_FID AND ROWNUM = 1;
					EXCEPTION
						WHEN NO_DATA_FOUND THEN
							v_G3E_FID := 0;
					END;
				END IF;
			EXIT WHEN (v_CBL_CODE IS NOT NULL OR v_G3E_FID = 0 OR v_IN_FID = 0 OR v_IN_FNO = 10300 OR (v_IN_FNO = 10800 AND v_SPLICE_CLASS = 'Main Joint'));
			END LOOP;
		END IF;
	END IF;
	DBMS_OUTPUT.PUT_LINE('OUT_FID = '||v_OUT_FID||' - OUT_FNO = '||v_OUT_FNO);
	IF v_OUT_FNO = 13000 THEN
		UPDATE GC_DP SET CABLE_CODE = v_CBL_CODE, ITFACE_CODE = v_CAB_CODE WHERE G3E_FID = v_OUT_FID;
	ELSIF v_OUT_FNO = 10300 THEN
		UPDATE GC_ITFACE SET CABLE_CODE = v_CBL_CODE WHERE G3E_FID = v_OUT_FID;
	END IF;
	
	p_CBL_CODE := v_CBL_CODE;
	p_CAB_CODE := v_CAB_CODE;
END CNO_GET_INFO_FROM_NR;

PROCEDURE CNO_SET_INFO_FROM_NR (p_G3E_FID	IN NUMBER,
								p_G3E_FNO 	IN NUMBER,
								p_IN_FID	IN NUMBER,		-- IF HAVE VALUE
								p_IN_FNO	IN NUMBER,		-- IF HAVE VALUE
								p_OUT_FID	IN NUMBER,		-- IF HAVE VALUE
								p_OUT_FNO	IN NUMBER)		-- IF HAVE VALUE
IS
	v_SPLICE_CLASS	B$GC_SPLICE.SPLICE_CLASS%TYPE := '';
	v_CBL_CODE		B$GC_SPLICE.CABLE_CODE%TYPE := '';
	v_CAB_CODE		B$GC_ITFACE.ITFACE_CODE%TYPE := '';
	
	v_IN_FID		B$GC_NR_CONNECT.IN_FID%TYPE;
	v_IN_FNO		B$GC_NR_CONNECT.IN_FNO%TYPE;
	v_G3E_FID		B$GC_NR_CONNECT.G3E_FID%TYPE;
	v_G3E_FNO		B$GC_NR_CONNECT.G3E_FNO%TYPE;
BEGIN
	v_G3E_FID	:= p_G3E_FID;
	v_G3E_FNO	:= p_G3E_FNO;
	v_IN_FID 	:= p_IN_FID;
	v_IN_FNO 	:= p_IN_FNO;
	
	IF v_IN_FID != 0 THEN
		-- IF IN IS ITFACE = 10300
		IF v_IN_FNO = 10300 THEN
			BEGIN
				SELECT 'D'||(SELECT COUNT(G3E_FID)+1 FROM GC_NR_CONNECT WHERE IN_FID = A.IN_FID AND G3E_FID <> v_G3E_FID), B.ITFACE_CODE INTO v_CBL_CODE, v_CAB_CODE FROM GC_NR_CONNECT A, GC_ITFACE B WHERE A.IN_FID = B.G3E_FID AND A.G3E_FID = v_G3E_FID;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					v_CBL_CODE 	:= '';
			END;
		ELSE
			LOOP
				-- CHECK NETWORK INFORMATION
				BEGIN
					SELECT A.IN_FID, A.IN_FNO, B.CABLE_CODE, B.SPLICE_CLASS, B.ITFACE_CODE INTO v_IN_FID, v_IN_FNO, v_CBL_CODE, v_SPLICE_CLASS, v_CAB_CODE FROM GC_NR_CONNECT A, GC_SPLICE B WHERE A.IN_FID = B.G3E_FID AND A.G3E_FID = v_G3E_FID;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						v_IN_FID 	:= 0;
						v_IN_FNO 	:= 0;
						v_CBL_CODE 	:= '';
				END;
				
				-- RAISE LOG
				DBMS_OUTPUT.PUT_LINE('G3E_FID = '||v_G3E_FID||' - CABLE CODE = '||v_CBL_CODE);
				
				-- SET VALUE FOR NEXT LOOPING
				IF v_CBL_CODE IS NULL THEN
					BEGIN
						SELECT G3E_FID INTO v_G3E_FID FROM GC_NR_CONNECT WHERE OUT_FID = v_IN_FID AND ROWNUM = 1;
					EXCEPTION
						WHEN NO_DATA_FOUND THEN
							v_G3E_FID := 0;
					END;
				END IF;
			EXIT WHEN (v_CBL_CODE IS NOT NULL OR v_G3E_FID = 0 OR v_IN_FID = 0 OR v_IN_FNO = 10300 OR (v_IN_FNO = 10800 AND v_SPLICE_CLASS = 'Main Joint'));
			END LOOP;
		END IF;
	END IF;
	
	IF p_G3E_FID > 0 THEN
		UPDATE GC_CBL SET CABLE_CODE = v_CBL_CODE, ITFACE_CODE = v_CAB_CODE WHERE G3E_FID = p_G3E_FID;
	END IF;
	IF p_IN_FID > 0 THEN
		IF p_IN_FNO = 10800 THEN
			UPDATE GC_SPLICE SET CABLE_CODE = v_CBL_CODE, ITFACE_CODE = v_CAB_CODE WHERE G3E_FID = p_IN_FID AND SPLICE_CLASS <> 'Main Joint';
		ELSIF p_IN_FNO = 13000 THEN
			UPDATE GC_DP SET CABLE_CODE = v_CBL_CODE, ITFACE_CODE = v_CAB_CODE WHERE G3E_FID = p_IN_FID;
		END IF;
	END IF;
	IF p_OUT_FID > 0 THEN
		IF p_OUT_FNO = 10800 THEN
			UPDATE GC_SPLICE SET CABLE_CODE = v_CBL_CODE, ITFACE_CODE = v_CAB_CODE WHERE G3E_FID = p_OUT_FID AND SPLICE_CLASS <> 'Main Joint';
		ELSIF p_OUT_FNO = 13000 THEN
			UPDATE GC_DP SET CABLE_CODE = v_CBL_CODE, ITFACE_CODE = v_CAB_CODE WHERE G3E_FID = p_OUT_FID;
		END IF;
	END IF;
END CNO_SET_INFO_FROM_NR;

PROCEDURE STORE_PAIR_COUNT (p_SIDE			IN VARCHAR2,					-- E or D
							p_G3E_FID 		IN NUMBER,						-- 
							p_G3E_FNO		IN NUMBER,
							p_DESIGNATION	IN VARCHAR2,
							p_LO_PAIR		IN VARCHAR2,
							p_HI_PAIR		IN VARCHAR2,
							p_REFCUR 		OUT G3E_DBTYPES.G3E_REF_CURSOR)
IS
BEGIN
	IF p_SIDE = 'E' THEN
		DBMS_OUTPUT.PUT_LINE('E');
	ELSE
		DBMS_OUTPUT.PUT_LINE('D');
	END IF;
	
	p_REFCUR := NULL;
END STORE_PAIR_COUNT;

END GC_OSP_COP_VAL; 
/

